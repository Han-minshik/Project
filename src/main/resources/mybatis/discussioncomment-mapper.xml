<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.project.mapper.DiscussionCommentMapper">
    <!-- 찬성 값 증가 -->
    <update id="incrementLike">
        UPDATE discussion_comment
        SET `like` = `like` + 1
        WHERE id = #{commentId}
    </update>
    <!-- 반대 값 증가 -->
    <update id="incrementUnlike">
        UPDATE discussion_comment
        SET `unlike` = `unlike` + 1
        WHERE id = #{commentId}
    </update>
    <!-- 찬/반 합산 조회 -->
    <select id="getTotalVotesByCommentId" resultType="java.lang.Integer">
        SELECT (`like` + `unlike`) AS totalVotes
        FROM discussion_comment
        WHERE id = #{commentId}
    </select>
    <!-- 특정 댓글 작성자 조회 -->
    <select id="getUserIdByCommentId" resultType="java.lang.String">
        SELECT user_id
        FROM discussion_comment
        WHERE id = #{commentId}
    </select>
    <!-- 특정 토론의 댓글 수 조회 -->
    <select id="getCommentCountByDiscussion" resultType="java.lang.Integer">
        SELECT COUNT(*)
        FROM discussion_comment
        WHERE discussion_id = #{discussionId}
    </select>
    <!-- 댓글 추가 -->
    <insert id="addComment">
        INSERT INTO discussion_comment (id, content, `like`, unlike, created_at, updated_at, user_id, discussion_id)
        VALUES (NULL, #{content}, 0, 0, DEFAULT, DEFAULT, #{userId}, #{discussionId});
    </insert>
    <!-- 가장 찬/반 합산이 많은 댓글 -->
    <select id="getFirstDiscussionComment" resultType="com.project.dto.DiscussionCommentDTO">
        SELECT id,
               content,
               `like`,
               unlike,
               user_id AS userId,
               discussion_id AS discussionId,
               (`like` + unlike) AS totalVotes
        FROM discussion_comment
        ORDER BY totalVotes DESC, created_at ASC
        LIMIT 1;
    </select>

    <!-- 두 번째로 찬/반 합산이 많은 댓글 -->
    <select id="getSecondDiscussionComment" resultType="com.project.dto.DiscussionCommentDTO">
        SELECT id,
               content,
               `like`,
               unlike,
               user_id AS userId,
               discussion_id AS discussionId,
               (`like` + unlike) AS totalVotes
        FROM discussion_comment
        ORDER BY totalVotes DESC, created_at ASC
        LIMIT 1 OFFSET 1;
    </select>
</mapper>


