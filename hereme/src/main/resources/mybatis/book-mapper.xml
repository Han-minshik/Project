<<<<<<< HEAD:hereme/src/main/resources/mybatis/book-mapper.xml
<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.project.mapper.BookMapper">
    <!-- 책 등록 -->
    <insert id="createBook">
        INSERT INTO book (isbn, title, author, publisher, publication_date, genre, rating, rental_state,
                          copies_avilable, detail, cover_image, created_at, user_id)
        VALUES (#{isbn}, #{title}, #{author}, #{publisher}, #{publicationDate}, #{genre}, #{rating},
                #{rentalState}, #{copiesAvailable}, #{detail}, #{coverImage}, #{createdAt}, #{userId})
    </insert>
    <!-- 책 찾기 -->
    <select id="getBookByIsbn" resultType="BookDTO">
        SELECT * FROM book WHERE isbn = #{isbn}
    </select>
    <!-- 모든 책 리스트 -->
    <select id="getAllBooks" resultType="BookDTO">
        SELECT * FROM book
    </select>
    <!-- 책 정보 수정 -->
    <update id="updateBook">
        UPDATE book
        SET title = #{title}, author = #{author}, publisher = #{publisher}, publication_date = #{publicationDate},
            genre = #{genre}, rating = #{rating}, rental_state = #{rentalState}, detail = #{detail},
            cover_image = #{coverImage}, created_at = DEFAULT, user_id = #{userId}
        WHERE isbn = #{isbn}
    </update>
    <!-- 책 삭제 -->
    <delete id="deleteBook">
        DELETE FROm book WHERE isbn = #{isbn}
    </delete>
    <!-- 베스트셀러 가져오기 -->
    <select id="getBestsellerList" resultType="BestsellerDTO">
        SELECT b.isbn, b.title, b.author, bs.rank, bs.created_at
        FROM book b
        JOIN bestseller bs ON b.isbn = BS.book_isbn
    </select>
</mapper>
=======
<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.project.mapper.BookMapper">
    <!-- 모든 책 리스트 -->
    <select id="getAllBooks" resultType="BookDTO">
        SELECT * FROM book
    </select>
    <!-- 제목으로 책 검색 -->
    <select id="searchBooksByNameWithCount" parameterType="string" resultType="map">
        SELECT b.*,
               (SELECT COUNT(*)
                FROM book
                WHERE title LIKE CONCAT('%', REPLACE(#{title}, ' ', ''), '%')) AS totalCount
        FROM book b
        WHERE b.title LIKE CONCAT('%', REPLACE(#{title}, ' ', ''), '%')
    </select>

    <!-- isbn 으로 책 조회 -->
    <select id="getBookByIsbn" resultType="BookDTO">
        SELECT * FROM book WHERE isbn = #{isbn}
    </select>
    <!-- 평균 평점이 가장 높은 책 반환 -->
    <select id="getPopularBook" resultType="BookDTO">
        SELECT *
        FROM book b
                 JOIN review r ON b.isbn = r.book_isbn
        GROUP BY b.isbn, b.title, b.author, b.publisher, b.price, b.detail, b.category
        ORDER BY AVG(r.rate) DESC
        LIMIT 1
    </select>
    <!-- 특정 책의 토론 주제 개수 조회 -->
    <select id="getDiscussionCountByBookIsbn" resultType="java.lang.Integer">
        SELECT COUNT(*)
        FROM discussion
        WHERE book_isbn = #{isbn}
    </select>
    <!-- 특정 책의 토론 참여자 인원수 조회 -->
    <select id="getParticipantCountByBookIsbn" resultType="java.lang.Integer">
        SELECT COUNT(DISTINCT dc.user_id) AS participantCount
        FROM discussion d
                 JOIN discussion_comment dc ON d.id = dc.discussion_id
        WHERE d.book_isbn = #{isbn}
    </select>
    <!-- 책 리뷰 조회 -->
    <select id="selectPaginatedReviewsByBookIsbn" resultType="ReviewDTO">
        SELECT REVIEW.*, USER.username AS user_name
        FROM (
        SELECT * FROM review
        WHERE book_isbn = #{isbn}
        <choose>
            <when test="pageInfo.sort == 'high-rate'">
                ORDER BY rate DESC
            </when>
            <when test="pageInfo.sort == 'low-rate'">
                ORDER BY rate
            </when>
            <otherwise>
                ORDER BY updated_at DESC
            </otherwise>
        </choose>
        LIMIT #{pageInfo.size} OFFSET #{pageInfo.offset}
        ) REVIEW
        INNER JOIN user USER ON REVIEW.user_id = USER.id
    </select>
    <!-- 리뷰 관련 쿼리(개수, 평균 등) -->
    <select id="selectPaginatedReviewTotalCountByIsbn" resultType="java.util.Map">
        SELECT
            IFNULL(rate, 'result') AS 'rate',
            COUNT(rate) 'count',
            AVG(rate) AS 'avg'
        FROM review WHERE book_isbn = #{isbn}
        GROUP BY rate with rollup
    </select>
    <!-- 책의 총 개수 -->
    <select id="selectPaginatedBooksTotalCount" resultType="java.lang.Integer">
        SELECT COUNT(*) FROM book
    </select>
    <!-- 책 조회할 때의 pagination   -->
    <select id="getPaginatedBooks" resultType="BookDTO">
        SELECT *
        FROM book b
        <choose>
            <when test="pageInfo.sort == 'recent'">
                ORDER BY b.publication_date DESC
            </when>
            <when test="pageInfo.sort == 'title'">
                ORDER BY b.title ASC
            </when>
            <otherwise>
                ORDER BY b.created_at DESC
            </otherwise>
        </choose>
        LIMIT #{pageInfo.size} OFFSET #{pageInfo.offset}
    </select>
    <!-- 평균 평점이 가장 높은 책 5권 반환 -->
    <select id="getPopularBook5" resultType="BookDTO">
        SELECT *
        FROM book b
                 JOIN review r ON b.isbn = r.book_isbn
        GROUP BY b.isbn, b.title, b.author, b.publisher, b.price, b.detail, b.category
        ORDER BY AVG(r.rate) DESC
        LIMIT 5
    </select>
    <!-- 평균 평점이 가장 높은 책 2권 반환 -->
    <select id="getPopularBook2" resultType="BookDTO">
        SELECT *
        FROM book b
                 JOIN review r ON b.isbn = r.book_isbn
        GROUP BY b.isbn, b.title, b.author, b.publisher, b.price, b.detail, b.category
        ORDER BY AVG(r.rate) DESC
        LIMIT 2
    </select>
    <!-- 유저 카트 조회 -->
    <select id="selectCartsByUser" resultType="CartDTO">
        SELECT * FROM `select_carts_by_user_view` WHERE `user_id` = #{id}
    </select>
    <!-- 카트에 책 추가 -->
    <insert id="insertBookToCart">
        INSERT INTO cart (no, user_id, book_isbn)
        VALUES (NULL, #{user_id}, #{book_isbn})
    </insert>
    <!-- 카트에서 특정 책 삭제 -->
    <delete id="deleteBookFromCart">
        DELETE FROM `cart` WHERE user_id = #{user.id} AND cart.no IN
        <foreach collection="carts" item="cart" open="(" close=")" separator=",">
            #{cart.no}
        </foreach>
    </delete>
    <!-- viewer -->
    <select id="getImageByIsbn" resultType="BookImageDTO">
        SELECT * FROM book_image WHERE book_isbn = #{isbn}
    </select>
</mapper>
>>>>>>> 메인-페이지-디자인(정예은):src/main/resources/mybatis/book-mapper.xml
